@inject IGeneralHttpServices GeneralHttpServices
@namespace Website.BlazorApp.Pages.Dashboard.ManageContactMessages.Components

<div class="modal fade show" id="updateModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="close"
                        @onclick="async () => await OnCloseDialog.InvokeAsync()">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="MessageToUpdateViewModel"
                          OnValidSubmit="OnSubmitForm">
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <label for="fullName">Full Name</label>
                                <InputText @bind-Value="MessageToUpdateViewModel.FullName" class="form-control"></InputText>
                              </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <label for="email">Email</label>
                                <InputText @bind-Value="MessageToUpdateViewModel.Email" class="form-control"></InputText>
                              </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <label for="phoneNumber">Phone Number</label>
                                <InputText @bind-Value="MessageToUpdateViewModel.PhoneNumber" class="form-control"></InputText>
                              </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <label for="title">Title</label>
                                <InputText @bind-Value="MessageToUpdateViewModel.Title" class="form-control"></InputText>
                              </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <label>Message content</label>
                                <InputTextArea @bind-Value="MessageToUpdateViewModel.Content" class="form-control"></InputTextArea>
                              </div>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" @onclick=@OnSubmitForm>OK</button>
                <button type="button" class="btn btn-secondary" @onclick="async () => await OnCloseDialog.InvokeAsync()">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public UpdateMessageViewModel MessageToUpdateViewModel { get; set; } = new();
    [Parameter] public string Title { get; set; }
    [Parameter] public Guid EntityIdToUpdate { get; set; }
    [Parameter] public EventCallback RefreshGridMethodOnSuccess { get; set; }
    [Parameter] public EventCallback OnApiError { get; set; }
    [Parameter] public EventCallback OnException { get; set; }
    [Parameter] public EventCallback OnCloseDialog { get; set; }
    
    private async Task OnSubmitForm()
    {
        try
        {
            Console.WriteLine($"\n\n\n\n There is no endpoint for update, this is just for a sample for other entities \n\n\n\n");
            var updateResult = await GeneralHttpServices.Update<UpdateMessageViewModel>(MessageToUpdateViewModel, $"/api/SecureContactUs/{EntityIdToUpdate}");
            if (updateResult)
            {
                await RefreshGridMethodOnSuccess.InvokeAsync();
            }
            else
            {
                await OnApiError.InvokeAsync();
            }
        }
        catch (Exception e)
        {
            await OnException.InvokeAsync();
        }
        await OnCloseDialog.InvokeAsync();
    }
}